import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Separator } from '@/components/ui/separator';
import Icon from '@/components/ui/icon';

interface UserSession {
  sessionId: string;
  userName: string;
  ip: string;
  firstVisit: string;
  lastActivity: string;
  messageCount: number;
  isActive: boolean;
  userAgent: string;
}

interface PrivateMessage {
  id: string;
  sessionId: string;
  userName: string;
  message: string;
  timestamp: string;
  replied: boolean;
  repliedBy?: string;
  repliedAt?: string;
  isVisible: boolean;
}

interface TelegramMessage {
  id: string;
  messageId: string;
  fromAdmin: boolean;
  botName?: string;
  text: string;
  timestamp: string;
  targetSessionId: string;
}

const PrivacySystem = () => {
  const [userSessions, setUserSessions] = useState<UserSession[]>([
    {
      sessionId: 'sess_001',
      userName: '–ê–Ω–Ω–∞',
      ip: '192.168.1.1',
      firstVisit: '2024-01-15 14:30',
      lastActivity: '2024-01-15 14:45',
      messageCount: 3,
      isActive: true,
      userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
    },
    {
      sessionId: 'sess_002',
      userName: '–ú–∏—Ö–∞–∏–ª',
      ip: '192.168.1.2',
      firstVisit: '2024-01-15 14:20',
      lastActivity: '2024-01-15 14:50',
      messageCount: 5,
      isActive: true,
      userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
    },
    {
      sessionId: 'sess_003',
      userName: '–ï–ª–µ–Ω–∞',
      ip: '192.168.1.3',
      firstVisit: '2024-01-15 13:45',
      lastActivity: '2024-01-15 14:30',
      messageCount: 2,
      isActive: false,
      userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 17_0 like Mac OS X) AppleWebKit/605.1.15'
    }
  ]);

  const [privateMessages, setPrivateMessages] = useState<PrivateMessage[]>([
    {
      id: 'msg_001',
      sessionId: 'sess_001',
      userName: '–ê–Ω–Ω–∞',
      message: '–ü—Ä–∏–≤–µ—Ç! –£ –º–µ–Ω—è –≤–æ–ø—Ä–æ—Å –ø–æ –≤–∞—à–µ–º—É –ø—Ä–æ–¥—É–∫—Ç—É. –ú–æ–∂–µ—Ç–µ –ø–æ–º–æ—á—å?',
      timestamp: '2024-01-15 14:30',
      replied: false,
      isVisible: true
    },
    {
      id: 'msg_002',
      sessionId: 'sess_001',
      userName: '–ê–Ω–Ω–∞',
      message: '–ö–∞–∫–∏–µ —É –≤–∞—Å —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏?',
      timestamp: '2024-01-15 14:32',
      replied: true,
      repliedBy: 'AI Assistant',
      repliedAt: '2024-01-15 14:33',
      isVisible: true
    },
    {
      id: 'msg_003',
      sessionId: 'sess_002',
      userName: '–ú–∏—Ö–∞–∏–ª',
      message: '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —á–∞—Ç! –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –ò–ò?',
      timestamp: '2024-01-15 14:25',
      replied: false,
      isVisible: true
    },
    {
      id: 'msg_004',
      sessionId: 'sess_002',
      userName: '–ú–∏—Ö–∞–∏–ª',
      message: '–ú–æ–∂–Ω–æ –ª–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ –≤ –º–æ–π –ø—Ä–æ–µ–∫—Ç?',
      timestamp: '2024-01-15 14:40',
      replied: true,
      repliedBy: 'Tech Bot',
      repliedAt: '2024-01-15 14:42',
      isVisible: true
    }
  ]);

  const [telegramMessages, setTelegramMessages] = useState<TelegramMessage[]>([
    {
      id: 'tg_001',
      messageId: 'msg_001',
      fromAdmin: false,
      text: 'üîî –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ê–Ω–Ω–∞:\n\n–ü—Ä–∏–≤–µ—Ç! –£ –º–µ–Ω—è –≤–æ–ø—Ä–æ—Å –ø–æ –≤–∞—à–µ–º—É –ø—Ä–æ–¥—É–∫—Ç—É. –ú–æ–∂–µ—Ç–µ –ø–æ–º–æ—á—å?\n\n–í—Ä–µ–º—è: 14:30',
      timestamp: '2024-01-15 14:30',
      targetSessionId: 'sess_001'
    },
    {
      id: 'tg_002',
      messageId: 'msg_002',
      fromAdmin: true,
      botName: 'AI Assistant',
      text: '–ö–æ–Ω–µ—á–Ω–æ! –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –æ—Ç 2000 —Ä—É–±–ª–µ–π.',
      timestamp: '2024-01-15 14:33',
      targetSessionId: 'sess_001'
    }
  ]);

  const [selectedSession, setSelectedSession] = useState<string>('');
  const [privacyStats, setPrivacyStats] = useState({
    totalSessions: 0,
    activeSessions: 0,
    totalMessages: 0,
    privateMessages: 0,
    repliedMessages: 0
  });

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  useEffect(() => {
    setPrivacyStats({
      totalSessions: userSessions.length,
      activeSessions: userSessions.filter(s => s.isActive).length,
      totalMessages: privateMessages.length,
      privateMessages: privateMessages.filter(m => m.isVisible).length,
      repliedMessages: privateMessages.filter(m => m.replied).length
    });
  }, [userSessions, privateMessages]);

  // –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  const simulateNewMessage = () => {
    const sessionId = 'sess_' + Math.random().toString(36).substr(2, 9);
    const userName = ['–ê–ª–µ–∫—Å–µ–π', '–ú–∞—Ä–∏—è', '–î–º–∏—Ç—Ä–∏–π', '–û–ª—å–≥–∞'][Math.floor(Math.random() * 4)];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
    const newSession: UserSession = {
      sessionId,
      userName,
      ip: `192.168.1.${Math.floor(Math.random() * 254) + 1}`,
      firstVisit: new Date().toISOString(),
      lastActivity: new Date().toISOString(),
      messageCount: 1,
      isActive: true,
      userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
    };

    setUserSessions(prev => [newSession, ...prev]);

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const newMessage: PrivateMessage = {
      id: 'msg_' + Date.now(),
      sessionId,
      userName,
      message: [
        '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º',
        '–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤–∞—à –ø—Ä–æ–¥—É–∫—Ç, –µ—Å—Ç—å –ª–∏ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞?',
        '–ö–∞–∫–∏–µ —É –≤–∞—Å —Ü–µ–Ω—ã? –ú–æ–∂–Ω–æ —Å–∫–∏–¥–∫—É?',
        '–•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å, –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?',
        '–£ –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º–∞, –ø–æ–º–æ–≥–∏—Ç–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è'
      ][Math.floor(Math.random() * 5)],
      timestamp: new Date().toISOString(),
      replied: false,
      isVisible: true
    };

    setPrivateMessages(prev => [newMessage, ...prev]);

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram
    const telegramNotification: TelegramMessage = {
      id: 'tg_' + Date.now(),
      messageId: newMessage.id,
      fromAdmin: false,
      text: `üîî –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${userName}:\n\n${newMessage.message}\n\n–í—Ä–µ–º—è: ${new Date().toLocaleTimeString()}`,
      timestamp: new Date().toISOString(),
      targetSessionId: sessionId
    };

    setTelegramMessages(prev => [telegramNotification, ...prev]);
  };

  // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  const simulateAdminReply = (messageId: string) => {
    const message = privateMessages.find(m => m.id === messageId);
    if (!message || message.replied) return;

    const botNames = ['AI Assistant', 'Tech Bot', 'Support Bot'];
    const botName = botNames[Math.floor(Math.random() * botNames.length)];
    
    const replies = [
      '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –° —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É –≤–∞–º.',
      '–ö–æ–Ω–µ—á–Ω–æ, —è –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.',
      '–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ü–æ–∑–≤–æ–ª—å—Ç–µ –æ–±—ä—è—Å–Ω–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ.',
      '–ü–æ–Ω–∏–º–∞—é –≤–∞—à –∏–Ω—Ç–µ—Ä–µ—Å. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å.',
      '–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –†–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à –≤–æ–ø—Ä–æ—Å.'
    ];

    const replyText = replies[Math.floor(Math.random() * replies.length)];

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω–æ–µ
    setPrivateMessages(prev => prev.map(m => 
      m.id === messageId ? {
        ...m,
        replied: true,
        repliedBy: botName,
        repliedAt: new Date().toISOString()
      } : m
    ));

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ Telegram
    const adminReply: TelegramMessage = {
      id: 'tg_' + Date.now(),
      messageId: messageId,
      fromAdmin: true,
      botName,
      text: replyText,
      timestamp: new Date().toISOString(),
      targetSessionId: message.sessionId
    };

    setTelegramMessages(prev => [adminReply, ...prev]);
  };

  // –°–∫—Ä—ã—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∏–º–∏—Ç–∞—Ü–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏)
  const toggleMessageVisibility = (messageId: string) => {
    setPrivateMessages(prev => prev.map(m => 
      m.id === messageId ? { ...m, isVisible: !m.isVisible } : m
    ));
  };

  // –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
  const deactivateSession = (sessionId: string) => {
    setUserSessions(prev => prev.map(s => 
      s.sessionId === sessionId ? { ...s, isActive: false } : s
    ));
  };

  const getSessionMessages = (sessionId: string) => {
    return privateMessages.filter(m => m.sessionId === sessionId);
  };

  const formatTimestamp = (timestamp: string) => {
    return new Date(timestamp).toLocaleString('ru-RU');
  };

  const getDeviceType = (userAgent: string) => {
    if (userAgent.includes('iPhone') || userAgent.includes('Android')) return 'mobile';
    if (userAgent.includes('iPad') || userAgent.includes('tablet')) return 'tablet';
    return 'desktop';
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-3xl font-bold tracking-tight">–°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏</h2>
          <p className="text-muted-foreground">
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
          </p>
        </div>
        <div className="flex items-center space-x-2">
          <Button onClick={simulateNewMessage} className="bg-gradient-to-r from-primary to-secondary">
            <Icon name="MessageCircle" size={16} className="mr-2" />
            –°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
          </Button>
        </div>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ */}
      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-5">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">–í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π</CardTitle>
            <Icon name="Users" className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{privacyStats.totalSessions}</div>
            <p className="text-xs text-muted-foreground">—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏</CardTitle>
            <Icon name="Activity" className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{privacyStats.activeSessions}</div>
            <p className="text-xs text-muted-foreground">—Å–µ–π—á–∞—Å –æ–Ω–ª–∞–π–Ω</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">–ü—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</CardTitle>
            <Icon name="Lock" className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{privacyStats.privateMessages}</div>
            <p className="text-xs text-muted-foreground">–≤–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä—É</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">–û—Ç–≤–µ—á–µ–Ω–æ</CardTitle>
            <Icon name="MessageSquare" className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{privacyStats.repliedMessages}</div>
            <p className="text-xs text-muted-foreground">
              {((privacyStats.repliedMessages / privacyStats.totalMessages) * 100).toFixed(1)}% –æ—Ç –≤—Å–µ—Ö
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Telegram —Å—Ç–∞—Ç—É—Å</CardTitle>
            <Icon name="Send" className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">‚úÖ</div>
            <p className="text-xs text-muted-foreground">–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞</p>
          </CardContent>
        </Card>
      </div>

      <div className="grid gap-6 lg:grid-cols-3">
        {/* –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ */}
        <Card>
          <CardHeader>
            <CardTitle>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏</CardTitle>
            <CardDescription>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–Ω–ª–∞–π–Ω –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {userSessions.filter(s => s.isActive).map(session => (
                <div 
                  key={session.sessionId}
                  className={`border rounded-lg p-3 cursor-pointer transition-colors ${
                    selectedSession === session.sessionId ? 'bg-primary/10 border-primary' : ''
                  }`}
                  onClick={() => setSelectedSession(session.sessionId)}
                >
                  <div className="flex items-center justify-between mb-2">
                    <div className="flex items-center space-x-2">
                      <div className="w-8 h-8 rounded-full bg-gradient-to-r from-primary to-secondary flex items-center justify-center text-white font-bold text-sm">
                        {session.userName.charAt(0)}
                      </div>
                      <div>
                        <p className="font-medium">{session.userName}</p>
                        <p className="text-xs text-muted-foreground">{session.ip}</p>
                      </div>
                    </div>
                    <div className="flex items-center space-x-1">
                      <Badge variant="outline" className="text-xs">
                        <Icon name={getDeviceType(session.userAgent) === 'mobile' ? 'Smartphone' : 'Monitor'} size={10} className="mr-1" />
                        {getDeviceType(session.userAgent)}
                      </Badge>
                      <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                    </div>
                  </div>
                  <div className="text-xs text-muted-foreground">
                    {session.messageCount} —Å–æ–æ–±—â–µ–Ω–∏–π ‚Ä¢ –ø–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {formatTimestamp(session.lastActivity)}
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è */}
        <Card>
          <CardHeader>
            <CardTitle>–ü—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</CardTitle>
            <CardDescription>
              {selectedSession 
                ? `–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userSessions.find(s => s.sessionId === selectedSession)?.userName || ''}`
                : '–í—Å–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
              }
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4 max-h-96 overflow-y-auto">
              {(selectedSession 
                ? getSessionMessages(selectedSession) 
                : privateMessages
              ).map(message => (
                <div key={message.id} className="border rounded-lg p-3">
                  <div className="flex items-center justify-between mb-2">
                    <div className="flex items-center space-x-2">
                      <span className="font-medium">{message.userName}</span>
                      {message.replied && (
                        <Badge variant="default" className="text-xs bg-green-100 text-green-800">
                          –û—Ç–≤–µ—á–µ–Ω–æ
                        </Badge>
                      )}
                      {!message.isVisible && (
                        <Badge variant="destructive" className="text-xs">
                          –°–∫—Ä—ã—Ç–æ
                        </Badge>
                      )}
                    </div>
                    <div className="flex items-center space-x-1">
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => toggleMessageVisibility(message.id)}
                        className="text-xs"
                      >
                        <Icon name={message.isVisible ? 'Eye' : 'EyeOff'} size={14} />
                      </Button>
                      {!message.replied && (
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => simulateAdminReply(message.id)}
                          className="text-xs"
                        >
                          <Icon name="Reply" size={14} />
                        </Button>
                      )}
                    </div>
                  </div>
                  <p className="text-sm text-gray-800 mb-2">{message.message}</p>
                  <div className="text-xs text-muted-foreground">
                    {formatTimestamp(message.timestamp)}
                    {message.replied && (
                      <span className="ml-2">
                        ‚Ä¢ –û—Ç–≤–µ—Ç–∏–ª {message.repliedBy} –≤ {formatTimestamp(message.repliedAt!)}
                      </span>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è */}
        <Card>
          <CardHeader>
            <CardTitle>Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è</CardTitle>
            <CardDescription>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç—ã —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4 max-h-96 overflow-y-auto">
              {telegramMessages.map(tgMsg => (
                <div 
                  key={tgMsg.id}
                  className={`border rounded-lg p-3 ${
                    tgMsg.fromAdmin ? 'bg-blue-50 border-blue-200' : 'bg-yellow-50 border-yellow-200'
                  }`}
                >
                  <div className="flex items-center justify-between mb-2">
                    <div className="flex items-center space-x-2">
                      <Icon 
                        name={tgMsg.fromAdmin ? 'ArrowLeft' : 'ArrowRight'} 
                        size={14}
                        className={tgMsg.fromAdmin ? 'text-blue-600' : 'text-yellow-600'}
                      />
                      <span className="text-sm font-medium">
                        {tgMsg.fromAdmin ? `–û—Ç–≤–µ—Ç (${tgMsg.botName})` : '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'}
                      </span>
                    </div>
                    <Badge 
                      variant="outline" 
                      className={`text-xs ${
                        tgMsg.fromAdmin ? 'bg-blue-100 text-blue-800' : 'bg-yellow-100 text-yellow-800'
                      }`}
                    >
                      Telegram
                    </Badge>
                  </div>
                  <p className="text-sm text-gray-800 mb-2 whitespace-pre-line">{tgMsg.text}</p>
                  <p className="text-xs text-muted-foreground">
                    {formatTimestamp(tgMsg.timestamp)}
                  </p>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>

      <Alert>
        <Icon name="Shield" className="h-4 w-4" />
        <AlertDescription>
          <strong>–°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏:</strong> –ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç—ã –±–æ—Ç–æ–≤. 
          –°–æ–æ–±—â–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∫—Ä—ã—Ç—ã. –í—Å–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏.
        </AlertDescription>
      </Alert>

      <Card>
        <CardHeader>
          <CardTitle>–ü—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏</CardTitle>
          <CardDescription>–ö–∞–∫ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid gap-4 md:grid-cols-2">
            <div className="space-y-4">
              <div className="flex items-start space-x-3">
                <Icon name="Lock" size={20} className="text-primary mt-1" />
                <div>
                  <h4 className="font-semibold">–ò–∑–æ–ª—è—Ü–∏—è —Å–µ—Å—Å–∏–π</h4>
                  <p className="text-sm text-muted-foreground">
                    –ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é, –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ—Ç –¥—Ä—É–≥–∏—Ö
                  </p>
                </div>
              </div>
              <div className="flex items-start space-x-3">
                <Icon name="Eye" size={20} className="text-primary mt-1" />
                <div>
                  <h4 className="font-semibold">–í–∏–¥–∏–º–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π</h4>
                  <p className="text-sm text-muted-foreground">
                    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–ø–∏—Å–∫—É –±–æ—Ç–æ–≤ –∏ —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                  </p>
                </div>
              </div>
              <div className="flex items-start space-x-3">
                <Icon name="MessageCircle" size={20} className="text-primary mt-1" />
                <div>
                  <h4 className="font-semibold">–ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã</h4>
                  <p className="text-sm text-muted-foreground">
                    –û—Ç–≤–µ—Ç—ã –æ—Ç –±–æ—Ç–æ–≤ –≤–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ —Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å
                  </p>
                </div>
              </div>
            </div>
            
            <div className="space-y-4">
              <div className="flex items-start space-x-3">
                <Icon name="Send" size={20} className="text-primary mt-1" />
                <div>
                  <h4 className="font-semibold">Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h4>
                  <p className="text-sm text-muted-foreground">
                    –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–≤–µ—Ç–∞
                  </p>
                </div>
              </div>
              <div className="flex items-start space-x-3">
                <Icon name="Users" size={20} className="text-primary mt-1" />
                <div>
                  <h4 className="font-semibold">–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Å—Å–∏–π</h4>
                  <p className="text-sm text-muted-foreground">
                    –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–µ–∑ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                  </p>
                </div>
              </div>
              <div className="flex items-start space-x-3">
                <Icon name="Shield" size={20} className="text-primary mt-1" />
                <div>
                  <h4 className="font-semibold">–ó–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö</h4>
                  <p className="text-sm text-muted-foreground">
                    –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–µ–π –≤ —Å–µ—Ç—å
                  </p>
                </div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default PrivacySystem;