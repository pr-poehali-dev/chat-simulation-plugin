import React, { useState, useEffect } from 'react';
import { ConversationMessage, Bot } from './conversation/types';
import MessageForm from './conversation/MessageForm';
import MessageList from './conversation/MessageList';
import PreviewPanel from './conversation/PreviewPanel';
import ImportExportActions from './conversation/ImportExportActions';
import { useToast } from '@/hooks/use-toast';

const ConversationEditor = () => {
  const { toast } = useToast();
  const [conversation, setConversation] = useState<ConversationMessage[]>([
    {
      id: 'msg_1',
      bot_name: 'AI Assistant',
      message: '–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. –ö—Ç–æ-–Ω–∏–±—É–¥—å —Å–ª—ã—à–∞–ª –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –≤ –æ–±–ª–∞—Å—Ç–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è?',
      time: '10:00',
      avatar_color: '#6C5CE7',
      delay_seconds: 2
    },
    {
      id: 'msg_2',
      bot_name: 'Tech Bot',
      message: '–î–∞, –æ—Å–æ–±–µ–Ω–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –Ω–æ–≤—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π! –û–Ω–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.',
      time: '10:02',
      reply_to: {
        bot_name: 'AI Assistant',
        message_short: '–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π...',
        message_id: 'msg_1'
      },
      avatar_color: '#74B9FF',
      delay_seconds: 3
    },
    {
      id: 'msg_3',
      bot_name: 'Data Guru',
      message: '–°–æ–≥–ª–∞—Å–µ–Ω! –ê —á—Ç–æ –¥—É–º–∞–µ—Ç–µ –æ –≤–ª–∏—è–Ω–∏–∏ –ò–ò –Ω–∞ –±—É–¥—É—â–µ–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏? –õ–∏—á–Ω–æ —è —Å—á–∏—Ç–∞—é, —á—Ç–æ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ –ø–æ—Ä–æ–≥–µ —Ä–µ–≤–æ–ª—é—Ü–∏–∏.',
      time: '10:05',
      avatar_color: '#00B894',
      delay_seconds: 4
    }
  ]);

  const [bots, setBots] = useState<Bot[]>([
    {
      id: 'bot_1',
      name: 'ai_assistant',
      displayName: 'AI Assistant',
      avatar_color: '#6C5CE7',
      personality: '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –∑–Ω–∞—é—â–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º',
      isActive: true
    },
    {
      id: 'bot_2',
      name: 'tech_bot',
      displayName: 'Tech Bot',
      avatar_color: '#74B9FF',
      personality: '–≠–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º –∏ –Ω–æ–≤–∏–Ω–∫–∞–º',
      isActive: true
    },
    {
      id: 'bot_3',
      name: 'data_guru',
      displayName: 'Data Guru',
      avatar_color: '#00B894',
      personality: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –¥–∞–Ω–Ω—ã–º –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ',
      isActive: true
    }
  ]);

  const [newMessage, setNewMessage] = useState({
    bot_name: '',
    message: '',
    time: '',
    reply_to_id: '',
    delay_seconds: 3
  });

  const [showAddMessage, setShowAddMessage] = useState(false);
  const [editingMessageId, setEditingMessageId] = useState<string | null>(null);
  const [jsonInput, setJsonInput] = useState('');
  const [showJsonImport, setShowJsonImport] = useState(false);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
  useEffect(() => {
    const savedConversation = localStorage.getItem('botConversation');
    const savedBots = localStorage.getItem('adminBots');
    
    if (savedConversation) {
      try {
        const loadedConversation = JSON.parse(savedConversation);
        setConversation(loadedConversation);
        console.log('–ü–µ—Ä–µ–ø–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ localStorage:', loadedConversation.length, '—Å–æ–æ–±—â–µ–Ω–∏–π');
      } catch (e) {
        console.error('Error loading conversation:', e);
      }
    }
    
    if (savedBots) {
      try {
        const loadedBots = JSON.parse(savedBots);
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏, —É–±–∏—Ä–∞—è –¥—É–±–ª–∏–∫–∞—Ç—ã
        const mergedBots = [
          ...loadedBots,
          ...bots.filter(defaultBot => 
            !loadedBots.some((loadedBot: Bot) => loadedBot.name === defaultBot.name)
          )
        ];
        setBots(mergedBots);
        console.log('–ë–æ—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage:', mergedBots.length, '–±–æ—Ç–æ–≤');
      } catch (e) {
        console.error('Error loading bots:', e);
      }
    }
  }, []);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏
  const saveConversation = (newConversation = conversation) => {
    localStorage.setItem('botConversation', JSON.stringify(newConversation));
    // –¢–∞–∫–∂–µ –¥—É–±–ª–∏—Ä—É–µ–º –≤ chatMessages –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    localStorage.setItem('chatMessages', JSON.stringify(newConversation));
    console.log('üíæ –ü–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', newConversation.length, '—Å–æ–æ–±—â–µ–Ω–∏–π');
    
    // –¢—Ä–∏–≥–≥–µ—Ä–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞ —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏–µ
    window.dispatchEvent(new CustomEvent('conversation-updated', {
      detail: { conversation: newConversation }
    }));
    
    console.log('üì° –°–æ–±—ã—Ç–∏–µ conversation-updated –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  const addMessage = () => {
    console.log('üî• –§–£–ù–ö–¶–ò–Ø addMessage –í–´–ó–í–ê–ù–ê!');
    console.log('üìù –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', newMessage);
    console.log('ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–æ—Ç—ã:', bots);
    console.log('üí¨ –¢–µ–∫—É—â–∞—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞:', conversation);
    
    if (!newMessage.bot_name || !newMessage.message.trim()) {
      console.log('‚ùå –û—à–∏–±–∫–∞: –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
      alert('–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞ –∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è');
      return;
    }

    const selectedBot = bots.find(bot => bot.displayName === newMessage.bot_name);
    console.log('üîç –ò—â–µ–º –±–æ—Ç–∞ —Å –∏–º–µ–Ω–µ–º:', newMessage.bot_name);
    console.log('‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–π –±–æ—Ç:', selectedBot);
    
    if (!selectedBot) {
      console.log('‚ùå –û—à–∏–±–∫–∞: –±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      alert('–í—ã–±—Ä–∞–Ω–Ω—ã–π –±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const replyTo = newMessage.reply_to_id ? 
      conversation.find(msg => msg.id === newMessage.reply_to_id) : null;

    const message: ConversationMessage = {
      id: `msg_${Date.now()}`,
      bot_name: newMessage.bot_name,
      message: newMessage.message,
      time: newMessage.time || new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' }),
      avatar_color: selectedBot.avatar_color,
      delay_seconds: newMessage.delay_seconds,
      reply_to: replyTo ? {
        bot_name: replyTo.bot_name,
        message_short: replyTo.message.length > 50 ? 
          replyTo.message.substring(0, 50) + '...' : replyTo.message,
        message_id: replyTo.id
      } : undefined
    };

    console.log('‚ú® –°–æ–∑–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);

    const newConversation = [...conversation, message];
    console.log('üìã –ù–æ–≤–∞—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞:', newConversation);
    
    setConversation(newConversation);
    setNewMessage({
      bot_name: '',
      message: '',
      time: '',
      reply_to_id: '',
      delay_seconds: 3
    });
    setShowAddMessage(false);
    saveConversation(newConversation);
    
    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!');
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  const deleteMessage = (messageId: string) => {
    const newConversation = conversation.filter(msg => msg.id !== messageId);
    setConversation(newConversation);
    saveConversation(newConversation);
  };

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  const editMessage = (messageId: string) => {
    const message = conversation.find(msg => msg.id === messageId);
    if (message) {
      setNewMessage({
        bot_name: message.bot_name,
        message: message.message,
        time: message.time,
        reply_to_id: message.reply_to?.message_id || '',
        delay_seconds: message.delay_seconds
      });
      setEditingMessageId(messageId);
      setShowAddMessage(true);
    }
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const saveEdit = () => {
    if (!editingMessageId) return;

    const selectedBot = bots.find(bot => bot.displayName === newMessage.bot_name);
    if (!selectedBot) return;

    const replyTo = newMessage.reply_to_id ? 
      conversation.find(msg => msg.id === newMessage.reply_to_id) : null;

    const newConversation = conversation.map(msg => 
      msg.id === editingMessageId ? {
        ...msg,
        bot_name: newMessage.bot_name,
        message: newMessage.message,
        time: newMessage.time,
        avatar_color: selectedBot.avatar_color,
        delay_seconds: newMessage.delay_seconds,
        reply_to: replyTo ? {
          bot_name: replyTo.bot_name,
          message_short: replyTo.message.length > 50 ? 
            replyTo.message.substring(0, 50) + '...' : replyTo.message,
          message_id: replyTo.id
        } : undefined
      } : msg
    );
    
    setConversation(newConversation);
    setEditingMessageId(null);
    setNewMessage({
      bot_name: '',
      message: '',
      time: '',
      reply_to_id: '',
      delay_seconds: 3
    });
    setShowAddMessage(false);
    saveConversation(newConversation);
  };

  // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  const moveMessage = (messageId: string, direction: 'up' | 'down') => {
    const currentIndex = conversation.findIndex(msg => msg.id === messageId);
    if (currentIndex === -1) return;

    const newIndex = direction === 'up' ? currentIndex - 1 : currentIndex + 1;
    if (newIndex < 0 || newIndex >= conversation.length) return;

    const newConversation = [...conversation];
    const [movedMessage] = newConversation.splice(currentIndex, 1);
    newConversation.splice(newIndex, 0, movedMessage);

    setConversation(newConversation);
    saveConversation(newConversation);
  };

  // –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON
  const exportToJson = () => {
    const exportData = {
      conversation,
      bots: bots.filter(bot => bot.isActive),
      exportDate: new Date().toISOString(),
      version: '1.0'
    };

    const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `bot-conversation-${new Date().toISOString().split('T')[0]}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    toast({
      title: "–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω",
      description: "–§–∞–π–ª –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ –≤–∞—à –∫–æ–º–ø—å—é—Ç–µ—Ä",
    });
  };

  // –ò–º–ø–æ—Ä—Ç –∏–∑ JSON
  const importFromJson = () => {
    try {
      const data = JSON.parse(jsonInput);
      if (data.conversation && Array.isArray(data.conversation)) {
        setConversation(data.conversation);
        saveConversation(data.conversation);
        setJsonInput('');
        setShowJsonImport(false);
        toast({
          title: "–ü–µ—Ä–µ–ø–∏—Å–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞",
          description: `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.conversation.length} —Å–æ–æ–±—â–µ–Ω–∏–π`,
        });
      } else {
        toast({
          title: "–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞",
          description: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ conversation",
          variant: "destructive",
        });
      }
    } catch (e) {
      toast({
        title: "–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞",
        description: "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON",
        variant: "destructive",
      });
    }
  };

  // –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∏
  const clearConversation = () => {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –ø–µ—Ä–µ–ø–∏—Å–∫—É?')) {
      const emptyConversation: ConversationMessage[] = [];
      setConversation(emptyConversation);
      saveConversation(emptyConversation);
    }
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  const generateTime = () => {
    const now = new Date();
    return now.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-3xl font-bold tracking-tight">–†–µ–¥–∞–∫—Ç–æ—Ä –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –±–æ—Ç–æ–≤</h2>
          <p className="text-muted-foreground">
            –°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é –ø–µ—Ä–µ–ø–∏—Å–∫—É –º–µ–∂–¥—É –±–æ—Ç–∞–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —á–∞—Ç–µ
          </p>
        </div>
        <ImportExportActions
          conversation={conversation}
          bots={bots}
          jsonInput={jsonInput}
          setJsonInput={setJsonInput}
          showJsonImport={showJsonImport}
          setShowJsonImport={setShowJsonImport}
          onImportFromJson={importFromJson}
          onExportToJson={exportToJson}
          onClearConversation={clearConversation}
        />
      </div>

      <div className="grid gap-6 lg:grid-cols-3">
        {/* –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π */}
        <div className="lg:col-span-2">
          <div className="flex items-center justify-between mb-4">
            <div></div>
            <MessageForm
              showAddMessage={showAddMessage}
              setShowAddMessage={setShowAddMessage}
              editingMessageId={editingMessageId}
              setEditingMessageId={setEditingMessageId}
              newMessage={newMessage}
              setNewMessage={setNewMessage}
              bots={bots}
              conversation={conversation}
              onAddMessage={addMessage}
              onSaveEdit={saveEdit}
              generateTime={generateTime}
            />
          </div>
          <MessageList
            conversation={conversation}
            onMoveMessage={moveMessage}
            onEditMessage={editMessage}
            onDeleteMessage={deleteMessage}
          />
        </div>

        {/* –ü—Ä–µ–≤—å—é –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
        <PreviewPanel conversation={conversation} />
      </div>
    </div>
  );
};

export default ConversationEditor;